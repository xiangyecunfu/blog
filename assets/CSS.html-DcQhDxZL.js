import{_ as t,o as e,c as l,e as i}from"./app-D8pFkU2i.js";const n={},a=i('<h2 id="_1-什么是margin高度塌陷问题" tabindex="-1"><a class="header-anchor" href="#_1-什么是margin高度塌陷问题"><span>1. 什么是margin高度塌陷问题？</span></a></h2><ol><li>当两个兄弟元素分别使用margin-bottom和margin-top时，那么他们之间的间隔距离取决与设置的最大值，不能达到预期间隔，这就是margin高度塌陷问题。</li><li>解决方案： - 在一个方向同时设置足够的高度。 - 使用BFC方式来处理。</li></ol><h2 id="_2-什么是bfc" tabindex="-1"><a class="header-anchor" href="#_2-什么是bfc"><span>2. 什么是BFC?</span></a></h2><ol><li>全称是块级格式化上下文(Block Formatting Context)。</li><li>一个独立的渲染区域，有自己的渲染规则，不受外部元素影响。</li><li><strong>触发BFC的条件：</strong> - 设置float属性值不为none方式。 - 设置position属性值为absolute或fixed。 - 设置display属性值为inline-block、table-cell、table-caption、flex、inline-flex。 - 设置overflow属性值不为visible。</li></ol><h2 id="_3-如何隐藏一个元素" tabindex="-1"><a class="header-anchor" href="#_3-如何隐藏一个元素"><span>3. 如何隐藏一个元素？</span></a></h2><table><thead><tr><th style="text-align:center;">方式</th><th style="text-align:center;">占位</th><th style="text-align:center;">点击事件</th></tr></thead><tbody><tr><td style="text-align:center;">display: none</td><td style="text-align:center;">❌</td><td style="text-align:center;">❌</td></tr><tr><td style="text-align:center;">opacity: 0</td><td style="text-align:center;">✅</td><td style="text-align:center;">✅</td></tr><tr><td style="text-align:center;">visibility: hidden</td><td style="text-align:center;">✅</td><td style="text-align:center;">❌</td></tr><tr><td style="text-align:center;">clip-path: circle(0)</td><td style="text-align:center;">✅</td><td style="text-align:center;">❌</td></tr><tr><td style="text-align:center;">position: absolute; <br> top: -999px</td><td style="text-align:center;">❌</td><td style="text-align:center;">✅</td></tr></tbody></table><h2 id="_4-overflow的属性值" tabindex="-1"><a class="header-anchor" href="#_4-overflow的属性值"><span>4. overflow的属性值？</span></a></h2><table><thead><tr><th style="text-align:center;">属性值</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;">visible</td><td>默认值，内容不会被修剪，会呈现在元素框之外。</td></tr><tr><td style="text-align:center;">hidden</td><td>内容会被修剪，并且其余内容是不可见的。</td></tr><tr><td style="text-align:center;">scroll</td><td>内容会被修剪，但是浏览器会显示滚动条以便查看其余的内容。</td></tr><tr><td style="text-align:center;">auto</td><td>如果内容被修剪，则浏览器会显示滚动条以便查看其余的内容。</td></tr><tr><td style="text-align:center;">inherit</td><td>规定应该从父元素继承overflow属性的值。</td></tr></tbody></table><h2 id="_5-元素浮动会带来那些问题" tabindex="-1"><a class="header-anchor" href="#_5-元素浮动会带来那些问题"><span>5. 元素浮动会带来那些问题？</span></a></h2><p>浮动(foat)是CSS中的一种布局属性，用于控制元素在其父元素中的位置，使元素可以浮动到其父元素的左侧或右侧。浮动通常用于实现文本环绕图片、创建多列布局等效果。</p><ol><li>父元素的高度无法被撑开，影响与父元素同级的元素。</li><li>与浮动元素同级的非浮动元素会跟随其后。</li><li>若非第一个元素浮动，则该元素之前的元素也需要浮动，否则会影响页面显示的结构。</li></ol><h2 id="_6-清除浮动的方式" tabindex="-1"><a class="header-anchor" href="#_6-清除浮动的方式"><span>6. 清除浮动的方式？</span></a></h2><table><thead><tr><th style="text-align:center;">方式</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:center;">父级div定义height</td><td>父级div手动定义height，用于设置父级div的高度。</td></tr><tr><td style="text-align:center;">结尾处加空div标签或者伪元素clear:both</td><td>在浮动元素后添加一个空div或者伪元素，利用css提高的clear:both清除浮动。</td></tr><tr><td style="text-align:center;">使用布局技巧</td><td>防止高度塌陷，可以使用flex和grid方式布局。</td></tr><tr><td style="text-align:center;">父级div定义overflow:hidden</td><td>父级div定义overflow:hidden，用于清除浮动。可能会存在裁剪内容的情况</td></tr><tr><td style="text-align:center;">使用定位</td><td>可以使用定位方式来代替浮动</td></tr></tbody></table><h2 id="_7-什么是盒子模型" tabindex="-1"><a class="header-anchor" href="#_7-什么是盒子模型"><span>7. 什么是盒子模型？</span></a></h2><p>用于排列和定位网页上的元素的基本概念。它定义了每个HTML元素周围的一个矩形区域(或盒子)，这个盒子包括内容、内边距、边框和外边距。CSS盒子模型有以下四个主要部分：</p><ul><li>内容(content) - 盒子的内容，显示文本和图像。</li><li>内边距(padding) - 清除内容与边框之间的空间。</li><li>边框(border) - 围绕在内边距和内容外的边框。</li><li>外边距(margin) - 清除其他元素与边框之间的空间。</li></ul><p>盒子模型又分为普通盒子模型和IE盒子模型。</p><ul><li>普通盒子模型：width = content。</li><li>IE盒子模型：width = content + padding + border。</li></ul><p>在css属性中box-sizing用于设置盒子模型。</p><ul><li>box-sizing: content-box; - 默认值，宽度和高度分别应用到元素的内容框。在宽度和高度之外绘制元素的内边距和边框。</li><li>box-sizing: border-box; - 为元素设定的宽度和高度决定了元素的边框盒。就是说，为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制。通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度。</li></ul><h2 id="_8-css中选择器的优先级-权重计算方式" tabindex="-1"><a class="header-anchor" href="#_8-css中选择器的优先级-权重计算方式"><span>8. CSS中选择器的优先级，权重计算方式？</span></a></h2><ol><li><strong>!important规则:</strong> 如果有!important声明，那么该规则具有最高的优先级。</li><li><strong>特定规则：</strong></li></ol><ul><li><strong>内联样式：</strong> 每一个内联样式特定权重为1000。</li><li><strong>id选择器：</strong> 每一个id选择器特定权重为100。</li><li><strong>类选择器、属性选择器和伪类选择器：</strong> 每一个类选择器、属性选择器和伪类选择器特定权重为10。</li><li><strong>元素选择器和伪元素选择器：</strong> 每一个元素选择器和伪元素选择器特定权重为1。</li><li><strong>通配符、子选择器、相邻选择器、同胞选择器：</strong> 通配符、子选择器、相邻选择器、同胞选择器权重为0。</li></ul><ol start="3"><li><strong>覆盖规则：</strong> 权重相同时，最后出现的样式表中的规则覆盖前面样式表中的规则。</li></ol><h2 id="_9-设置元素居中有那些方式" tabindex="-1"><a class="header-anchor" href="#_9-设置元素居中有那些方式"><span>9. 设置元素居中有那些方式？</span></a></h2><ol><li><strong>水平居中：</strong></li></ol><ul><li>行内元素：text-align: center;。</li><li>块级元素：margin: 0 auto;。</li><li>绝对定位元素：position: absolute; left: 50%; margin-left: -(元素宽度/2);。</li><li>绝对定位元素：position: absolute; left: 50%; transform: translateX(-50%);。</li><li>flex布局：display: flex; justify-content: center;。</li></ul><ol start="2"><li><strong>垂直居中：</strong></li></ol><ul><li>行内元素：line-height: 元素高度;。</li><li>绝对定位元素：position: absolute; top: 50%; transform: translateY(-50%);。</li><li>flex布局：display: flex; align-items: center;。</li></ul><h2 id="_10-为什么img是inline但是可以设置宽高" tabindex="-1"><a class="header-anchor" href="#_10-为什么img是inline但是可以设置宽高"><span>10. 为什么img是inline但是可以设置宽高?</span></a></h2><p>img元素通常被视为内联元素，但可以设置宽度和高度，这是因为HTML规范中对img元素的默认样式有特殊的定义。默认情况下，img元素是内联元素，但可以设置其宽度和高度。这是因为img元素通常需要具体的宽度和高度信息，以确保图像以正确的尺寸显示，而不会引起页面重新布局。因此，即使是内联元素，img元素也可以具有宽度和高度属性。</p>',31),r=[a];function d(s,o){return e(),l("div",null,r)}const h=t(n,[["render",d],["__file","CSS.html.vue"]]),g=JSON.parse('{"path":"/series/audition/CSS.html","title":"CSS面试题","lang":"en-US","frontmatter":{"title":"CSS面试题","author":"一心只想回农村","date":"2024-6-7","tags":["CSS","面试","前端"]},"headers":[{"level":2,"title":"1. 什么是margin高度塌陷问题？","slug":"_1-什么是margin高度塌陷问题","link":"#_1-什么是margin高度塌陷问题","children":[]},{"level":2,"title":"2. 什么是BFC?","slug":"_2-什么是bfc","link":"#_2-什么是bfc","children":[]},{"level":2,"title":"3. 如何隐藏一个元素？","slug":"_3-如何隐藏一个元素","link":"#_3-如何隐藏一个元素","children":[]},{"level":2,"title":"4. overflow的属性值？","slug":"_4-overflow的属性值","link":"#_4-overflow的属性值","children":[]},{"level":2,"title":"5. 元素浮动会带来那些问题？","slug":"_5-元素浮动会带来那些问题","link":"#_5-元素浮动会带来那些问题","children":[]},{"level":2,"title":"6. 清除浮动的方式？","slug":"_6-清除浮动的方式","link":"#_6-清除浮动的方式","children":[]},{"level":2,"title":"7. 什么是盒子模型？","slug":"_7-什么是盒子模型","link":"#_7-什么是盒子模型","children":[]},{"level":2,"title":"8. CSS中选择器的优先级，权重计算方式？","slug":"_8-css中选择器的优先级-权重计算方式","link":"#_8-css中选择器的优先级-权重计算方式","children":[]},{"level":2,"title":"9. 设置元素居中有那些方式？","slug":"_9-设置元素居中有那些方式","link":"#_9-设置元素居中有那些方式","children":[]},{"level":2,"title":"10. 为什么img是inline但是可以设置宽高?","slug":"_10-为什么img是inline但是可以设置宽高","link":"#_10-为什么img是inline但是可以设置宽高","children":[]}],"git":{"createdTime":1717213385000,"updatedTime":1718870584000,"contributors":[{"name":"tiantao","email":"tiantao_yb@139.com","commits":2}]},"filePathRelative":"series/audition/CSS.md"}');export{h as comp,g as data};
