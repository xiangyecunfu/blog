import{_ as e,r as l,o as c,c as o,a as n,d as a,w as t,e as i,b as p}from"./app-D8pFkU2i.js";const u={},r={class:"table-of-contents"},d=i(`<h2 id="_1-javascript-中的数据类型有哪些" tabindex="-1"><a class="header-anchor" href="#_1-javascript-中的数据类型有哪些"><span>1. JavaScript 中的数据类型有哪些？</span></a></h2><ol><li>基本数据类型：Number、String、Boolean、null、undefined、Symbol、BigInt</li><li>引用数据类型：Object、Array、Function</li></ol><h2 id="_2-什么是闭包" tabindex="-1"><a class="header-anchor" href="#_2-什么是闭包"><span>2. 什么是闭包？</span></a></h2><ol><li><strong>定义</strong>:闭包是指引用了另一个函数作用域中变量的函数，通常是在嵌套函数中实现的。</li><li><strong>作用</strong>:闭包可以保留其被定义时的作用域，这意味着闭包内部可以访问外部函数的局部变量，即使外部函数已经执行完毕。这种特性使得闭包可以在后续调用中使用这些变量。</li></ol><blockquote><p>注意:<br> 闭包会使得函数内部的变量在函数执行后仍然存在于内存中，直到没有任何引用指向闭包。如果不注意管理闭包，可能会导致内存泄漏问题。</p></blockquote><ol start="3"><li><strong>案例：</strong></li></ol><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">accumulation</span> <span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">initValue <span class="token operator">=</span> <span class="token number">0</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> result<span class="token operator">=</span> initValue<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    result <span class="token operator">+=</span> value<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">index</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-javascript中的原型链。" tabindex="-1"><a class="header-anchor" href="#_3-javascript中的原型链。"><span>3. JavaScript中的原型链。</span></a></h2><ol><li><strong>定义：</strong> 每个对象（除null外）都有一个内部链接到另外一个对象，这个对象成为原型对象，原型对象也有自己的原型， 这样一层一层的链接下去，这个链就称为原型链；</li><li><strong>原型链的作用：</strong> 用于实现继承和共享属性的机制。</li></ol><h2 id="_4-解释一下-javascript-中的作用域和作用域链。" tabindex="-1"><a class="header-anchor" href="#_4-解释一下-javascript-中的作用域和作用域链。"><span>4. 解释一下 JavaScript 中的作用域和作用域链。</span></a></h2><ol><li><strong>作用域</strong>: 是指程序源代码中定义变量的区域，分为全局作用域和局部作用域。</li><li><strong>作用域链</strong>: 是指由多个作用域组成的链，用于查找变量。</li><li><strong>作用域链的查找过程：</strong> 首先在当前作用域中查找变量，如果找不到则向上级作用域中查找，直到找到全局作用域为止。如果仍然找不到，则报错。</li></ol><h2 id="_5-请说下javascript中的this指向问题" tabindex="-1"><a class="header-anchor" href="#_5-请说下javascript中的this指向问题"><span>5. 请说下JavaScript中的this指向问题？</span></a></h2><ol><li>全局作用域中，this指向全局对象。(浏览器中指向window对象，Node中指向global对象)。</li><li>函数作用域中，this指向调用函数的对象。</li><li>对象方法中，this指向调用该方法的对象。</li><li>构造函数中，this指向新创建的对象。</li><li>使用apply、call或bind方法时，this指向指定的对象。</li><li>在事件处理函数中，this指向触发该事件的元素。</li><li>在箭头函数中，this指向定义时所在的上下文。</li></ol><h2 id="_6-请解释javascript中的call、apply和bind方法的区别" tabindex="-1"><a class="header-anchor" href="#_6-请解释javascript中的call、apply和bind方法的区别"><span>6. 请解释JavaScript中的call、apply和bind方法的区别？</span></a></h2><ol><li>call、apply和bind方法都是用来改变函数的this指向的。</li><li>call和apply方法的区别在于参数传递的方式不同。call方法接受多个参数，apply方法接受一个包含多个参数的数组。</li><li>bind方法会创建一个新的函数，而新函数的this指向bind中传入的上下文。</li><li>call和apply方法都会立即执行函数，而bind方法会返回一个新的函数，需要手动调用。</li></ol><details class="custom-container details"><summary class="custom-container-title">手写实现</summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token class-name">Fuction</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myCall</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">cxt<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  cxt <span class="token operator">=</span> cxt <span class="token operator">||</span> globalThis </span>
<span class="line">  <span class="token keyword">const</span> uniqueKey <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建唯一键</span></span>
<span class="line">  cxt<span class="token punctuation">[</span>uniqueKey<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment">// 将当前函数赋值给上下文对象</span></span>
<span class="line">  <span class="token keyword">const</span> result <span class="token operator">=</span> cxt<span class="token punctuation">[</span>uniqueKey<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用函数</span></span>
<span class="line">  <span class="token keyword">delete</span> cxt<span class="token punctuation">[</span>uniqueKey<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 删除上下文对象中的函数</span></span>
<span class="line">  <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myApply</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">cxt<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  cxt <span class="token operator">=</span> cxt <span class="token operator">||</span> globalThis<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> uniqueKey <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token comment">// 判断args是否是数组</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>args <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> args <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;arguments must be an array&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">const</span> uniqueKey <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  cxt<span class="token punctuation">[</span>uniqueKey<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">const</span> result <span class="token operator">=</span> args <span class="token operator">?</span> cxt<span class="token punctuation">[</span>uniqueKey<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">:</span> cxt<span class="token punctuation">[</span>uniqueKey<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">delete</span> cxt<span class="token punctuation">[</span>uniqueKey<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> result<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myBind</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">cxt<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment">// 保存原函数使用</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>newArgs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>cxt<span class="token punctuation">,</span> args<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>newArgs<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="_7-数组中有那些方法" tabindex="-1"><a class="header-anchor" href="#_7-数组中有那些方法"><span>7. 数组中有那些方法？</span></a></h2><table><thead><tr><th>分类</th><th>涉及方法</th><th>副作用</th></tr></thead><tbody><tr><td>增删</td><td>push、pop、 shift、unshift</td><td>会改变原数组</td></tr><tr><td>重排序方法</td><td>reverse、sort</td><td>会改变原数组</td></tr><tr><td>操作方法</td><td>concat、slice、splice</td><td>concat、slice是返回新数组，splice则会改变原数组</td></tr><tr><td>位置方法</td><td>indexOf、lastIndexOf、find、at</td><td>用于查找，不影响原数组</td></tr><tr><td>迭代方法</td><td>forEach、map、filter、some、every</td><td>用于遍历，不影响原数组</td></tr><tr><td>归并方法</td><td>reduce、reduceRight</td><td>用于归并，不影响原数组</td></tr><tr><td>静态方法</td><td>isArray、from、of</td><td>用于创建数组，不影响原数组</td></tr><tr><td>转换方法</td><td>toString、toLocaleString、toLocalDateString</td><td>用于将数组转换为字符串，不影响原数组</td></tr><tr><td>填充方法</td><td>fill</td><td>用于填充数组，不影响原数组</td></tr><tr><td>查找方法</td><td>findIndex、findLastIndex</td><td>用于查找，不影响原数组</td></tr><tr><td>新方法</td><td>toReversed、toSorted、toSpliced</td><td>用于操作，不影响原数组</td></tr><tr><td>展开方法</td><td>flat、flatMap</td><td>用于展开数组，不影响原数组</td></tr></tbody></table><h2 id="_8-字符串中有那些方法" tabindex="-1"><a class="header-anchor" href="#_8-字符串中有那些方法"><span>8. 字符串中有那些方法？</span></a></h2><table><thead><tr><th>分类</th><th>涉及方法</th></tr></thead><tbody><tr><td>字符串操作</td><td>slice、substring、substr</td></tr><tr><td>字符串查找</td><td>indexOf、lastIndexOf、at、includes</td></tr><tr><td>字符串截取</td><td>trim、trimLeft、trimRight</td></tr><tr><td>字符串大小写转换</td><td>toLowerCase、toUpperCase、toLocaleLowerCase、toLocaleUpperCase</td></tr><tr><td>字符串替换</td><td>replace</td></tr><tr><td>字符串模式匹配</td><td>match、matchAll、search、split</td></tr><tr><td>字符串格式化</td><td>format</td></tr><tr><td>字符串转换</td><td>toString、valueOf</td></tr></tbody></table><h2 id="_9-请讲一讲变量提升和函数提升是什么意思" tabindex="-1"><a class="header-anchor" href="#_9-请讲一讲变量提升和函数提升是什么意思"><span>9. 请讲一讲变量提升和函数提升是什么意思？</span></a></h2><ol><li><strong>变量提升：</strong> 一般指的是通过var关键字声明的变量，在代码执行之前，变量就已经被声明并赋值为undefined。</li><li><strong>函数提升：</strong> 一般指的是通过function关键字声明的函数，在代码执行之前，函数就已经被声明并赋值。</li><li><strong>变量提示和函数提升的区别：</strong> 变量提升只提升变量的声明，而不提升变量的赋值；函数提升则既提升函数的声明，又提升函数的赋值。且函数提升优先级高于变量提升。</li></ol><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">TIP</p><p><strong>手写实现</strong></p><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// [Funciton: a]</span></span>
<span class="line"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">20</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">a</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment">// 20</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="_10-null-和-undefined-的区别是什么" tabindex="-1"><a class="header-anchor" href="#_10-null-和-undefined-的区别是什么"><span>10. null 和 undefined 的区别是什么？</span></a></h2><ol><li>undefined</li></ol><ul><li>当声明了一个变量但未初始化它时，它的值为undefined</li><li>当访问对象属性或数组元素中不存在的属性或索引时，也会返回undefined</li><li>当函数没有返回值时，默认返回undefined</li><li>如果函数的参数没有传递或没有被提供值，函数内的对应参数的值为undefined</li></ul><ol start="2"><li>null</li></ol><ul><li><code>null</code>是一个特殊的关键字，表示一个空对象指针。</li><li>它通常用于显式地指示一个变量或属性的值是空的，<code>nu11</code>是一个赋值的操作，用来表示&quot;没有值&quot;或&quot;空&quot;</li><li><code>nu11</code>通常需要开发人员主动分配给变量，而不是自动分配的默认值。</li><li><code>nul1</code>是原型链的顶层:所有对象都继承自<code>Object</code>原型对象，<code>Object</code>原型对象的原型是<code>nu11</code></li></ul><h2 id="_11-new关键字做了那些事情" tabindex="-1"><a class="header-anchor" href="#_11-new关键字做了那些事情"><span>11. new关键字做了那些事情？</span></a></h2><ol><li>创建一个空对象，并链接到构造函数的原型。</li><li>将构造函数的this指向对象并执行构造函数。</li><li>确保构造函数返回的是一个对象，如果没有则返回一个新对象。</li></ol><details class="custom-container details"><summary class="custom-container-title">示例</summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line">  <span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token parameter">constructor<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> obj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">constructor</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> result <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> result <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> result <span class="token operator">:</span> obj<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token function">myNew</span><span class="token punctuation">(</span>Person<span class="token punctuation">,</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;John&#39;</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 30</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="_12-什么是惰性函数" tabindex="-1"><a class="header-anchor" href="#_12-什么是惰性函数"><span>12. 什么是惰性函数？</span></a></h2><p>惰性函数是指在第一次调用时执行特定操作，之后将函数重写或修改，以便在以后的调用中直接返回缓存的结果而不再执行该操作。这通常用于性能优化，以避免重复执行开销较大的操作。</p><details class="custom-container details"><summary class="custom-container-title">示例</summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> *  这里是一个复制方法， 如果不使用惰性函数的时候， 我们每次进入分钟都需要进行逻辑判断，这样就带来了极大的性能消耗</span>
<span class="line"> * 但是我们浏览器支持就后续不需要继续判断了，所以使用惰性函数， 这样后续进来就直接只执行一个就行。</span>
<span class="line"> * */</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">createCopy</span> <span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 判断浏览器是否支持新的方法</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>isSecureContext <span class="token operator">&amp;&amp;</span> navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function-variable function">createCopy</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">writeText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function-variable function">createCopy</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> textArea <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;textarea&#39;</span><span class="token punctuation">)</span></span>
<span class="line">      textArea<span class="token punctuation">.</span>value <span class="token operator">=</span> text</span>
<span class="line">      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>textArea<span class="token punctuation">)</span></span>
<span class="line">      textArea<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      document<span class="token punctuation">.</span><span class="token function">execCommand</span><span class="token punctuation">(</span><span class="token string">&#39;copy&#39;</span><span class="token punctuation">)</span></span>
<span class="line">      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>textArea<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">createCopy</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="_13-防抖和节流" tabindex="-1"><a class="header-anchor" href="#_13-防抖和节流"><span>13. 防抖和节流？</span></a></h2><ol><li>防抖</li></ol><ul><li>防抖是指在事件被触发n秒后再执行回调，如果在这n秒内事件又被触发，则重新计时, 直到事件触发完成。</li><li>防抖的原理就是：在事件被触发n秒后再执行回调，如果在这n秒内事件又被触发，则重新计时。</li><li>防抖的应用场景： <ul><li>输入框的搜索联想功能</li><li>手机号、邮箱的验证功能</li><li>窗口大小Resize</li><li>用户名、密码的验证功能</li></ul></li></ul><details class="custom-container details"><summary class="custom-container-title">手写实现</summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> timer</span>
<span class="line">  <span class="token keyword">return</span>  <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 这里使用箭头函数就不需要做this绑定了</span></span>
<span class="line">    <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">fn</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><ol start="2"><li>节流</li></ol><ul><li>节流是指规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效。</li><li>节流的原理就是：在事件被触发n秒后再执行回调，如果在这n秒内事件又被触发，则重新计时。</li><li>节流的优点是： <ul><li>节流可以减少事件触发的频率，减少不必要的事件回调，优化性能。</li><li>节流可以减少函数执行的次数，从而节省系统资源。</li></ul></li><li>节流的应用场景： <ul><li>鼠标连续触发resize或者scroll事件时，只认最后一次执行。</li><li>监听滚动事件，比如是否滑到底部自动加载更多，用throttle来判断。</li><li>按钮的点击事件，防止用户点击太快，触发多次。</li></ul></li></ul><details class="custom-container details"><summary class="custom-container-title">手写实现</summary><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delay</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> timer</span>
<span class="line">  <span class="token keyword">return</span>  <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">fn</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">          timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>   </span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="_14-请说下var、let和const的区别" tabindex="-1"><a class="header-anchor" href="#_14-请说下var、let和const的区别"><span>14. 请说下var、let和const的区别？</span></a></h2><ol><li>var</li></ol><ul><li>声明变量，可以重复声明，存在变量提升，存在变量覆盖。</li><li>作用域：全局作用域和函数作用域。</li></ul><ol start="2"><li>let</li></ol><ul><li>声明变量，不可以重复声明，不存在变量提升，存在暂时性死区，不存在变量覆盖。</li><li>作用域：全局作用域和块级作用域。</li><li>场景：声明变量，防止变量覆盖，可以更改值。</li></ul><ol start="3"><li>const</li></ol><ul><li>声明常量，不可以重复声明，不存在变量提升，存在暂时性死区，不存在变量覆盖。</li><li>作用域：全局作用域和块级作用域。</li><li>场景：常用于定义不可变的值或者常量。</li></ul>`,49);function k(v,m){const s=l("router-link");return c(),o("div",null,[n("nav",r,[n("ul",null,[n("li",null,[a(s,{to:"#_1-javascript-中的数据类型有哪些"},{default:t(()=>[p("1. JavaScript 中的数据类型有哪些？")]),_:1})]),n("li",null,[a(s,{to:"#_2-什么是闭包"},{default:t(()=>[p("2. 什么是闭包？")]),_:1})]),n("li",null,[a(s,{to:"#_3-javascript中的原型链。"},{default:t(()=>[p("3. JavaScript中的原型链。")]),_:1})]),n("li",null,[a(s,{to:"#_4-解释一下-javascript-中的作用域和作用域链。"},{default:t(()=>[p("4. 解释一下 JavaScript 中的作用域和作用域链。")]),_:1})]),n("li",null,[a(s,{to:"#_5-请说下javascript中的this指向问题"},{default:t(()=>[p("5. 请说下JavaScript中的this指向问题？")]),_:1})]),n("li",null,[a(s,{to:"#_6-请解释javascript中的call、apply和bind方法的区别"},{default:t(()=>[p("6. 请解释JavaScript中的call、apply和bind方法的区别？")]),_:1})]),n("li",null,[a(s,{to:"#_7-数组中有那些方法"},{default:t(()=>[p("7. 数组中有那些方法？")]),_:1})]),n("li",null,[a(s,{to:"#_8-字符串中有那些方法"},{default:t(()=>[p("8. 字符串中有那些方法？")]),_:1})]),n("li",null,[a(s,{to:"#_9-请讲一讲变量提升和函数提升是什么意思"},{default:t(()=>[p("9. 请讲一讲变量提升和函数提升是什么意思？")]),_:1})]),n("li",null,[a(s,{to:"#_10-null-和-undefined-的区别是什么"},{default:t(()=>[p("10. null 和 undefined 的区别是什么？")]),_:1})]),n("li",null,[a(s,{to:"#_11-new关键字做了那些事情"},{default:t(()=>[p("11. new关键字做了那些事情？")]),_:1})]),n("li",null,[a(s,{to:"#_12-什么是惰性函数"},{default:t(()=>[p("12. 什么是惰性函数？")]),_:1})]),n("li",null,[a(s,{to:"#_13-防抖和节流"},{default:t(()=>[p("13. 防抖和节流？")]),_:1})]),n("li",null,[a(s,{to:"#_14-请说下var、let和const的区别"},{default:t(()=>[p("14. 请说下var、let和const的区别？")]),_:1})])])]),d])}const h=e(u,[["render",k],["__file","JavaScript.html.vue"]]),f=JSON.parse('{"path":"/series/audition/JavaScript.html","title":"JavaScript面试题","lang":"en-US","frontmatter":{"title":"JavaScript面试题","author":"一心只想回农村","date":"2024-6-7 - 面试","tags":["JavaScript","面试","前端"]},"headers":[{"level":2,"title":"1. JavaScript 中的数据类型有哪些？","slug":"_1-javascript-中的数据类型有哪些","link":"#_1-javascript-中的数据类型有哪些","children":[]},{"level":2,"title":"2. 什么是闭包？","slug":"_2-什么是闭包","link":"#_2-什么是闭包","children":[]},{"level":2,"title":"3. JavaScript中的原型链。","slug":"_3-javascript中的原型链。","link":"#_3-javascript中的原型链。","children":[]},{"level":2,"title":"4. 解释一下 JavaScript 中的作用域和作用域链。","slug":"_4-解释一下-javascript-中的作用域和作用域链。","link":"#_4-解释一下-javascript-中的作用域和作用域链。","children":[]},{"level":2,"title":"5. 请说下JavaScript中的this指向问题？","slug":"_5-请说下javascript中的this指向问题","link":"#_5-请说下javascript中的this指向问题","children":[]},{"level":2,"title":"6. 请解释JavaScript中的call、apply和bind方法的区别？","slug":"_6-请解释javascript中的call、apply和bind方法的区别","link":"#_6-请解释javascript中的call、apply和bind方法的区别","children":[]},{"level":2,"title":"7. 数组中有那些方法？","slug":"_7-数组中有那些方法","link":"#_7-数组中有那些方法","children":[]},{"level":2,"title":"8. 字符串中有那些方法？","slug":"_8-字符串中有那些方法","link":"#_8-字符串中有那些方法","children":[]},{"level":2,"title":"9. 请讲一讲变量提升和函数提升是什么意思？","slug":"_9-请讲一讲变量提升和函数提升是什么意思","link":"#_9-请讲一讲变量提升和函数提升是什么意思","children":[]},{"level":2,"title":"10. null 和 undefined 的区别是什么？","slug":"_10-null-和-undefined-的区别是什么","link":"#_10-null-和-undefined-的区别是什么","children":[]},{"level":2,"title":"11. new关键字做了那些事情？","slug":"_11-new关键字做了那些事情","link":"#_11-new关键字做了那些事情","children":[]},{"level":2,"title":"12. 什么是惰性函数？","slug":"_12-什么是惰性函数","link":"#_12-什么是惰性函数","children":[]},{"level":2,"title":"13. 防抖和节流？","slug":"_13-防抖和节流","link":"#_13-防抖和节流","children":[]},{"level":2,"title":"14. 请说下var、let和const的区别？","slug":"_14-请说下var、let和const的区别","link":"#_14-请说下var、let和const的区别","children":[]}],"git":{"createdTime":1717213385000,"updatedTime":1718870742000,"contributors":[{"name":"tiantao","email":"tiantao_yb@139.com","commits":2},{"name":"牧月","email":"100196232+xiangyecunfu@users.noreply.github.com","commits":1}]},"filePathRelative":"series/audition/JavaScript.md"}');export{h as comp,f as data};
