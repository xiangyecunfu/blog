import{_ as n,o as s,c as a,e}from"./app-D8pFkU2i.js";const p={},t=e(`<h1 id="pinia和vuex的差异性" tabindex="-1"><a class="header-anchor" href="#pinia和vuex的差异性"><span>Pinia和Vuex的差异性</span></a></h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><hr><h1 id="pinia-和-vuex的差异性" tabindex="-1"><a class="header-anchor" href="#pinia-和-vuex的差异性"><span>Pinia 和 Vuex的差异性</span></a></h1><h2 id="前言-1" tabindex="-1"><a class="header-anchor" href="#前言-1"><span>前言</span></a></h2><p>近期在写Vue3项目，在使用Pinia进行状态管理，在实际使用过程中，比Vuex舒服很多，也减少了很多代码的书写。这种差异特别是在实际项目中尤为明显，个人在公司项目中，因为涉及到协同问题，所以每个人都要自己的想法，有的人会根据特有的业务模块进行分模块进行存储状态，而有的人更喜欢集中在主模块中存储，这样在实际开发过程中会有很大的心智负担，而Pinia这块则没有。</p><h2 id="官方说明" tabindex="-1"><a class="header-anchor" href="#官方说明"><span>官方说明</span></a></h2><p>在Pinia官方文档中提到，Vue团队在开发Vuex@5的时候，Pinia已经实现了很多Vuex@5中的大部分功能，故将Pinia作为Vuex的新方案。</p><p>与 Vuex 相比，Pinia 不仅提供了一个更简单的 API，也提供了符合组合式 API 风格的 API，最重要的是，搭配 TypeScript 一起使用时有非常可靠的类型推断支持。</p><h2 id="两者差异性" tabindex="-1"><a class="header-anchor" href="#两者差异性"><span>两者差异性</span></a></h2><p>Vuex和Pinia存在以下差异性：</p><ol><li>Vuex只有一个store，Pinia是多store的</li><li>Vuex是使用命名空间进行模块化区分，并使用核心model来进行组合，Pinia则是使用一个id来标记store</li><li>Pinia删除了Vuex中冗余的mutation</li><li>更新状态差异性，Vuex需要在mutation中使用commit进行状态更新，而Pinia不需要</li><li>action中更新方式发生变化，Pinia直接更新，不需要像Vuex借助mutation进行触发更新。</li></ol><h2 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例"><span>代码示例</span></a></h2><h3 id="vuex中的使用方式" tabindex="-1"><a class="header-anchor" href="#vuex中的使用方式"><span>Vuex中的使用方式</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// 创建store的入口文件</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vuex&#39;</span></span>
<span class="line"><span class="token keyword">import</span> moduleA <span class="token keyword">from</span> <span class="token string">&#39;./moduleA&#39;</span></span>
<span class="line"><span class="token keyword">import</span> moduleB form <span class="token string">&#39;./moduleB&#39;</span></span>
<span class="line"><span class="token comment">// 导出store， 使用module合并模块</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">	<span class="token literal-property property">modules</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">		moduleA<span class="token punctuation">,</span></span>
<span class="line">		moduleB</span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 每个模块的写法</span></span>
<span class="line"><span class="token comment">// 定义初始状态</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">state</span> <span class="token operator">=</span> <span class="token parameter">（）</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">	<span class="token literal-property property">count</span><span class="token operator">:</span> <span class="token number">0</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span>；</span>
<span class="line"><span class="token comment">// getters</span></span>
<span class="line"><span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token function-variable function">doubleCount</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span>getter</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> state<span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token number">2</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// mutation </span></span>
<span class="line"><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function-variable function">SET_COUNT</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        state<span class="token punctuation">.</span>count <span class="token operator">=</span> num</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// actions</span></span>
<span class="line"><span class="token keyword">const</span> actions<span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">editCount</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span>commit<span class="token punctuation">}</span><span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;SET_COUNT&#39;</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 导出</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">namespaced</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 是否设置命名空间</span></span>
<span class="line">    state<span class="token punctuation">,</span></span>
<span class="line">    getters<span class="token punctuation">,</span></span>
<span class="line">    mutations</span>
<span class="line">    actions</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// component - 触发异步更新</span></span>
<span class="line"><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&#39;editCount&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="pinia中使用的方式" tabindex="-1"><a class="header-anchor" href="#pinia中使用的方式"><span>Pinia中使用的方式</span></a></h3><div class="language-javascript line-numbers-mode" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;pinia&#39;</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> useCounterStore <span class="token operator">=</span><span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">	<span class="token string">&#39;counter&#39;</span><span class="token punctuation">,</span> <span class="token comment">// store的唯一id， 类似命名空间的作用</span></span>
<span class="line">	<span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>count：<span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token function-variable function">getter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>count <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      		<span class="token keyword">this</span><span class="token punctuation">.</span>count<span class="token operator">++</span></span>
<span class="line">    	<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// component </span></span>
<span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useCounterStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@/stores&#39;</span></span>
<span class="line"><span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">useCounterStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span> count <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">storeToRefs</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span> <span class="token comment">// 使用结构方式需要storeToRefs包裹让其不失去响应式</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">click</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">	counter<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 不管同步还是异步都可以触发</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="结语" tabindex="-1"><a class="header-anchor" href="#结语"><span>结语</span></a></h2><p>这里就简单介绍这些写法上的差异性吧，其实Pinia还是有很多和Vuex相同的函数方式，本篇幅有限， 就不一一介绍，需要的就各自去研究。整体上Pinia更加简洁，而且TS支持效果也更佳。</p>`,19),i=[t];function l(c,o){return s(),a("div",null,i)}const r=n(p,[["render",l],["__file","PiniaheVuexdechayixing.html.vue"]]),d=JSON.parse('{"path":"/blogs/PiniaheVuexdechayixing.html","title":"Pinia和Vuex的差异性","lang":"en-US","frontmatter":{"categories":["Vue"],"tags":["Vue","Pinia","Vuex","状态管理"],"date":"2024-03-01T16:00:00.000Z"},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"前言","slug":"前言-1","link":"#前言-1","children":[]},{"level":2,"title":"官方说明","slug":"官方说明","link":"#官方说明","children":[]},{"level":2,"title":"两者差异性","slug":"两者差异性","link":"#两者差异性","children":[]},{"level":2,"title":"代码示例","slug":"代码示例","link":"#代码示例","children":[{"level":3,"title":"Vuex中的使用方式","slug":"vuex中的使用方式","link":"#vuex中的使用方式","children":[]},{"level":3,"title":"Pinia中使用的方式","slug":"pinia中使用的方式","link":"#pinia中使用的方式","children":[]}]},{"level":2,"title":"结语","slug":"结语","link":"#结语","children":[]}],"git":{"createdTime":1718266904000,"updatedTime":1718266904000,"contributors":[{"name":"tiantao","email":"tiantao_yb@139.com","commits":1}]},"filePathRelative":"blogs/Pinia和Vuex的差异性.md"}');export{r as comp,d as data};
