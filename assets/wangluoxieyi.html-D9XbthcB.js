import{_ as d,r,o as i,c as a,a as t,b as e,d as s,e as l}from"./app-D8pFkU2i.js";const o="/blog/assets/blog-2-DACALizB.png",g="/blog/assets/image-202408191923-DnbLihcp.png",c="/blog/assets/image-202408201232-BT1uJ0CV.png",h="/blog/assets/image-202408201823-CuvuNYOv.png",p={},x=l('<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言"><span>前言</span></a></h2><p>最近在面试中，面试官总是会问到网络协议这块，但是每次都回答的不是很清楚，所以下来整理梳理下这块的知识。其实这块的知识整体也没多少。 <img src="'+o+'" alt="知识总结"></p><h2 id="一、http" tabindex="-1"><a class="header-anchor" href="#一、http"><span>一、HTTP</span></a></h2><h3 id="_1-1-基础知识" tabindex="-1"><a class="header-anchor" href="#_1-1-基础知识"><span>1.1 基础知识</span></a></h3><ol><li>http是什么？<br> 🌟 http是超文本传输协议(HyperText Transfer Protocol)。</li><li>http协议的作用是什么？<br> 🌟 http协议是用于确保客户端与服务器之间的通信。 🌟 http设计的目的是为了提供一种发布和接收 HTML 页面的方法。 🌟 它是基于TCP/IP通信协议来传递数据（HTML 文件, 图片文件, 查询结果等）。</li><li>http的安全问题？<br> 🌟 http协议是无状态的，每次请求都是独立的，服务器不会保存客户端的状态，且传输的数据未经加密，可能会被窃听或篡改。</li></ol><h3 id="_1-2-http的状态码" tabindex="-1"><a class="header-anchor" href="#_1-2-http的状态码"><span>1.2 http的状态码？</span></a></h3><ol><li>1xx（信息性状态码）<br></li><li>2xx（成功状态码）<br></li><li>3xx（重定向状态码）<br></li><li>4xx（客户端错误状态码）<br></li><li>5xx（服务器错误状态码）<br></li></ol><table><thead><tr><th style="text-align:left;">状态码</th><th style="text-align:left;">描述</th><th style="text-align:center;">记忆</th></tr></thead><tbody><tr><td style="text-align:left;">100</td><td style="text-align:left;">继续。客户端应继续其请求</td><td style="text-align:center;">✅</td></tr><tr><td style="text-align:left;">101</td><td style="text-align:left;">切换协议。服务器根据客户端的请求切换协议。</td><td style="text-align:center;">❎</td></tr><tr><td style="text-align:left;">200</td><td style="text-align:left;">成功。请求成功。一般用于 GET 和 POST 请求</td><td style="text-align:center;">✅</td></tr><tr><td style="text-align:left;">201</td><td style="text-align:left;">已创建。成功请求并创建了新的资源</td><td style="text-align:center;">❎</td></tr><tr><td style="text-align:left;">202</td><td style="text-align:left;">已接受。已经接受请求，但未处理完成</td><td style="text-align:center;">❎</td></tr><tr><td style="text-align:left;">203</td><td style="text-align:left;">非授权信息。请求成功。但返回的元信息不在原始的服务器，而是一个副本</td><td style="text-align:center;">❎</td></tr><tr><td style="text-align:left;">204</td><td style="text-align:left;">无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档</td><td style="text-align:center;">❎</td></tr><tr><td style="text-align:left;">205</td><td style="text-align:left;">重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。此响应主要是用于清除浏览器的表单域</td><td style="text-align:center;">❎</td></tr><tr><td style="text-align:left;">206</td><td style="text-align:left;">部分内容。服务器成功处理了部分 GET 请求</td><td style="text-align:center;">❎</td></tr><tr><td style="text-align:left;">300</td><td style="text-align:left;">多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择</td><td style="text-align:center;">❎</td></tr><tr><td style="text-align:left;">301</td><td style="text-align:left;">永久移动。请求的资源已被永久移动到新位置。服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。</td><td style="text-align:center;">❎</td></tr><tr><td style="text-align:left;">302</td><td style="text-align:left;">临时移动。请求的资源临时从不同的 URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。</td><td style="text-align:center;">❎</td></tr><tr><td style="text-align:left;">303</td><td style="text-align:left;">查看其他位置。请求的资源可在另一个 URI 下被找到，应使用 GET 请求访问那个资源。</td><td style="text-align:center;">❎</td></tr><tr><td style="text-align:left;">304</td><td style="text-align:left;">未修改。自从上次请求后，请求的网页未修改过。服务器返回此响应时，不会返回网页内容。</td><td style="text-align:center;">✅</td></tr><tr><td style="text-align:left;">305</td><td style="text-align:left;">使用代理。请求的资源必须通过代理访问</td><td style="text-align:center;">❎</td></tr><tr><td style="text-align:left;">307</td><td style="text-align:left;">临时重定向。与 302 相似。使用 GET 请求重定向</td><td style="text-align:center;">❎</td></tr><tr><td style="text-align:left;">400</td><td style="text-align:left;">请求错误。服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求</td><td style="text-align:center;">✅</td></tr><tr><td style="text-align:left;">401</td><td style="text-align:left;">未授权。请求要求身份验证。对于需要登录的网页，服务器可能返回此响应</td><td style="text-align:center;">✅</td></tr><tr><td style="text-align:left;">403</td><td style="text-align:left;">禁止。服务器拒绝请求</td><td style="text-align:center;">✅</td></tr><tr><td style="text-align:left;">404</td><td style="text-align:left;">未找到。服务器找不到请求的资源</td><td style="text-align:center;">✅</td></tr><tr><td style="text-align:left;">405</td><td style="text-align:left;">方法禁用。请求中指定的请求方法不能用于请求相应的资源</td><td style="text-align:center;">❎</td></tr><tr><td style="text-align:left;">406</td><td style="text-align:left;">不接受。无法使用请求的内容特性响应请求的网页</td><td style="text-align:center;">❎</td></tr><tr><td style="text-align:left;">407</td><td style="text-align:left;">需要代理授权。该状态码与 401（未授权）类似，但指定请求者应当授权使用代理。</td><td style="text-align:center;">❎</td></tr><tr><td style="text-align:left;">408</td><td style="text-align:left;">请求超时。服务器等候请求时发生超时</td><td style="text-align:center;">❎</td></tr><tr><td style="text-align:left;">409</td><td style="text-align:left;">冲突。由于冲突，请求无法完成</td><td style="text-align:center;">❎</td></tr><tr><td style="text-align:left;">410</td><td style="text-align:left;">已删除。如果请求的资源已永久删除，服务器就会返回此响应</td><td style="text-align:center;">❎</td></tr><tr><td style="text-align:left;">411</td><td style="text-align:left;">需要有效长度。服务器不接受不含有效内容长度标头字段的请求</td><td style="text-align:center;">❎</td></tr><tr><td style="text-align:left;">412</td><td style="text-align:left;">未满足前提条件。服务器未满足请求者在请求中设置的其中一个前提条件</td><td style="text-align:center;">❎</td></tr><tr><td style="text-align:left;">413</td><td style="text-align:left;">请求实体过大。请求实体过大，服务器无法处理</td><td style="text-align:center;">❎</td></tr><tr><td style="text-align:left;">414</td><td style="text-align:left;">请求的 URI 过长。请求的 URI 过长（URI 通常为网址），服务器无法处理</td><td style="text-align:center;">❎</td></tr><tr><td style="text-align:left;">415</td><td style="text-align:left;">不支持的媒体类型。请求的格式不受请求页面的支持</td><td style="text-align:center;">❎</td></tr><tr><td style="text-align:left;">416</td><td style="text-align:left;">请求范围不符合要求。如果页面无法提供请求的范围，则服务器会返回此状态码</td><td style="text-align:center;">❎</td></tr><tr><td style="text-align:left;">417</td><td style="text-align:left;">未满足期望值。服务器未满足&quot;期望&quot;请求标头字段的要求</td><td style="text-align:center;">❎</td></tr><tr><td style="text-align:left;">500</td><td style="text-align:left;">服务器内部错误。服务器遇到错误，无法完成请求</td><td style="text-align:center;">✅</td></tr><tr><td style="text-align:left;">501</td><td style="text-align:left;">服务器不支持请求的功能。服务器不支持请求的功能，无法完成请求</td><td style="text-align:center;">❎</td></tr><tr><td style="text-align:left;">502</td><td style="text-align:left;">错误网关。服务器作为网关或代理，从上游服务器收到无效响应</td><td style="text-align:center;">❎</td></tr><tr><td style="text-align:left;">503</td><td style="text-align:left;">服务不可用。服务器目前无法使用（由于超载或停机维护）</td><td style="text-align:center;">✅</td></tr><tr><td style="text-align:left;">504</td><td style="text-align:left;">网关超时。服务器作为网关或代理，但是没有及时从上游服务器收到请求</td><td style="text-align:center;">✅</td></tr><tr><td style="text-align:left;">505</td><td style="text-align:left;">HTTP 版本不受支持。服务器不支持请求中所使用的 HTTP 协议版本</td><td style="text-align:center;">✅</td></tr></tbody></table><p>上述中得状态码，我们只需要关注100、200、304、401、402、403、404、500、503、504、505 这几个状态码即可。</p><h3 id="_1-3-请求方法" tabindex="-1"><a class="header-anchor" href="#_1-3-请求方法"><span>1.3 请求方法</span></a></h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>GET</td><td>请求指定的页面信息，并返回实体主体</td></tr><tr><td>POST</td><td>向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改</td></tr><tr><td>PUT</td><td>从客户端向服务器传送的数据取代指定的文档的内容</td></tr><tr><td>DELETE</td><td>请求服务器删除指定的页面</td></tr><tr><td>CONNECT</td><td>HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器</td></tr><tr><td>OPTIONS</td><td>允许客户端查看服务器的性能</td></tr></tbody></table><h3 id="_1-4-https" tabindex="-1"><a class="header-anchor" href="#_1-4-https"><span>1.4 https</span></a></h3><p>🌟 https: 超文本传输安全协议(HyperText Transfer Protocol Secure)，即http的安全版本，在http的基础上加入了SSL(Secure Sockets Layer)协议，用于对传输的数据进行加密。</p><h3 id="_1-5-https与http的区别" tabindex="-1"><a class="header-anchor" href="#_1-5-https与http的区别"><span>1.5 https与http的区别</span></a></h3><table><thead><tr><th style="text-align:center;">区别</th><th style="text-align:center;">http</th><th style="text-align:center;">https</th></tr></thead><tbody><tr><td style="text-align:center;">加密</td><td style="text-align:center;">不加密，容易被篡改和截获</td><td style="text-align:center;">加密，使用SSL/TLS协议对传输的数据进行加密</td></tr><tr><td style="text-align:center;">端口</td><td style="text-align:center;">80</td><td style="text-align:center;">443</td></tr><tr><td style="text-align:center;">证书</td><td style="text-align:center;">不需要</td><td style="text-align:center;">需要申请SSL证书</td></tr><tr><td style="text-align:center;">成本</td><td style="text-align:center;">免费</td><td style="text-align:center;">需要购买证书费，有一定成本</td></tr><tr><td style="text-align:center;">seo</td><td style="text-align:center;">搜索引擎可能会对没有使用HTTPS的网站进行降权</td><td style="text-align:center;">搜索引擎倾向于优先索引和展示使用HTTPS的网站</td></tr><tr><td style="text-align:center;">安全性</td><td style="text-align:center;">不安全，且浏览器会进行提示显示不安全网站</td><td style="text-align:center;">安全，浏览器显示一个锁形图标，表示网站是安全的</td></tr><tr><td style="text-align:center;">性能</td><td style="text-align:center;">不加密数据，性能高于https</td><td style="text-align:center;">需要加密和解密数据，有一定的性能损耗</td></tr><tr><td style="text-align:center;">兼容性</td><td style="text-align:center;">兼容性好</td><td style="text-align:center;">部分老浏览器不支持</td></tr><tr><td style="text-align:center;">运用场景</td><td style="text-align:center;">不需要传输敏感数据， 如博客、新闻网站等</td><td style="text-align:center;">需要传输敏感数据，如银行、电商网站、电子邮件等</td></tr></tbody></table><h3 id="_1-6-http2-3" tabindex="-1"><a class="header-anchor" href="#_1-6-http2-3"><span>1.6 http2/3</span></a></h3><p>🌟 http2: http2是http协议的第二个主要版本，是1.1版本的升级， 基于SPDY协议开发的，大部分浏览器在2015年左右支持，主要是为了解决http1.1的性能、延迟、安全问题。</p><p><strong>http2的改进：</strong></p><ol><li>多路复用：HTTP/2 允许同时发送多个请求和响应，而不是像 HTTP/1.1 一样只能一个一个地处理。这样可以减少延迟，提高效率，提高网络吞吐量。</li><li>二进制传输：HTTP/2 使用二进制协议，与 HTTP/1.1 使用的文本协议不同。二进制协议可以更快地解析，更有效地传输数据，减少了传输过程中的开销和延迟。</li><li>头部压缩：HTTP/2 使用 HPACK 算法对 HTTP 头部进行压缩，减少了头部传输的数据量，从而减少了网络延迟。</li><li>服务器推送：HTTP/2 支持服务器推送，允许服务器在客户端请求之前推送资源，以提高性能。</li><li>改进的安全性：HTTP/2 默认使用 TLS（Transport Layer Security）加密传输数据，提高了安全性。</li><li>兼容 HTTP/1.1：HTTP/2 可以与 HTTP/1.1 共存，服务器可以同时支持 HTTP/1.1 和 HTTP/2。如果客户端不支持 HTTP/2，服务器可以回退到 HTTP/1.1</li></ol><p>🌟 http3: http3是http协议的第三个主要版本，是http2的升级，基于QUIC协议开发的，大部分浏览器在2020年左右支持，主要是为了解决http2的中使用TCP和SSL双连接的局限性。</p><p><strong>http3的改进：</strong></p><ol><li><strong>消除队头阻塞（Head-of-Line Blocking）：</strong> HTTP/2 因使用 TCP 而存在队头阻塞问题，当一个数据包延迟时，会阻塞整个数据流。HTTP/3 通过使用基于 UDP（用户数据报协议）的新传输协议 QUIC 解决了这个问题。在 HTTP/3 中，如果一个数据包丢失，只有受影响的流会暂停，其他流可以继续传输，大大提高了数据传输效率。</li><li><strong>更快的连接建立：</strong> HTTP/3 通过使用 QUIC 的内置功能，将传输握手和加密握手合二为一，从而减少了延迟。与需要多次握手的 HTTP/2 相比，HTTP/3 的连接建立速度更快。</li><li><strong>增强的安全性：</strong> HTTP/3 在传输层默认要求加密，而 HTTP/2 的加密是可选的。这种默认加密确保了更安全的浏览体验。</li><li><strong>在移动和网络切换场景中的更好表现：</strong> QUIC 设计能够更高效地处理网络切换，使HTTP/3 在用户频繁切换Wi-Fi和移动网络时更加可靠。</li></ol><h3 id="_1-7-content-type" tabindex="-1"><a class="header-anchor" href="#_1-7-content-type"><span>1.7 content-type</span></a></h3><p>Content-Type（内容类型），一般是指网页中存在的 Content-Type，用于定义网络文件的类型和网页的编码，决定浏览器将以什么形式、什么编码读取这个文件。</p>',24),y={class:"custom-container info"},T=l('<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">参考</p>',2),f={href:"https://www.runoob.com/http/http-content-type.html",target:"_blank",rel:"noopener noreferrer"},S=t("h3",{id:"_1-8-mime类型",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_1-8-mime类型"},[t("span",null,"1.8 MIME类型")])],-1),_=t("p",null,"MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的标准，用来表示文档、文件或字节流的性质和格式。",-1),P=t("p",null,"MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。",-1),m=t("p",null,"浏览器通常使用 MIME 类型（而不是文件扩展名）来确定如何处理URL，因此 We b服务器在响应头中添加正确的 MIME 类型非常重要。如果配置不正确，浏览器可能会无法解析文件内容，网站将无法正常工作，并且下载的文件也会被错误处。",-1),u={class:"custom-container info"},L=l('<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">参考</p>',2),b={href:"https://www.runoob.com/http/mime-types.html",target:"_blank",rel:"noopener noreferrer"},H=l('<h2 id="二、tcp-ip协议" tabindex="-1"><a class="header-anchor" href="#二、tcp-ip协议"><span>二、TCP/IP协议</span></a></h2><p>TCP/IP协议是互联网的基础协议，由传输层协议TCP和IP协议组成。TCP/IP协议用于在计算机之间传输数据，确保数据传输的可靠性和完整性。</p><p>这里主要讲下关于TCP的三次握手和四次挥手，至于其他基础知识，请自行查阅。</p><h3 id="_2-1-三次握手" tabindex="-1"><a class="header-anchor" href="#_2-1-三次握手"><span>2.1 三次握手</span></a></h3><p>三次握手是TCP协议建立连接的过程，它确保了双方都准备好进行数据传输。</p><p>三次握手的过程如下：</p><ol><li><strong>SYN（同步）</strong>：客户端向服务器发送一个SYN包，请求建立连接。这个包中包含一个初始序列号。</li><li><strong>SYN-ACK（同步-确认）</strong>：服务器收到SYN包后，向客户端发送一个SYN-ACK包，表示同意建立连接。这个包中包含一个确认号，确认号是客户端的初始序列号加1。</li><li><strong>ACK（确认）</strong>：客户端收到SYN-ACK包后，向服务器发送一个ACK包，表示确认连接已经建立。这个包中包含一个确认号，确认号是服务器的初始序列号加1。</li></ol><p>通过三次握手，客户端和服务器都确认了对方的接收和发送能力，从而建立了可靠的连接。 <img src="'+g+'" alt="三次握手"></p><h3 id="_2-2-四次挥手" tabindex="-1"><a class="header-anchor" href="#_2-2-四次挥手"><span>2.2 四次挥手</span></a></h3><p>四次挥手是TCP协议关闭连接的过程，它确保了双方都准备好结束数据传输。</p><p>四次挥手的过程如下：</p><ol><li><strong>FIN（终止）</strong>：客户端向服务器发送一个FIN包，表示请求关闭连接。</li><li><strong>ACK（确认）</strong>：服务器收到FIN包后，向客户端发送一个ACK包，表示确认收到关闭请求。</li><li><strong>FIN（终止）</strong>：服务器向客户端发送一个FIN包，表示请求关闭连接。</li><li><strong>ACK（确认）</strong>：客户端收到FIN包后，向服务器发送一个ACK包，表示确认收到关闭请求。</li></ol><p>通过四次挥手，客户端和服务器都确认了对方的关闭请求，从而结束了连接。 <img src="'+c+'" alt="四次挥手"></p><div class="custom-container tip"><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24"><g fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="12" cy="12" r="9"></circle><path d="M12 8h.01"></path><path d="M11 12h1v4h1"></path></g></svg><p class="custom-container-title">场景模拟理解</p><p>张学友叫刘德华帮忙参演他的演唱会 三次握手</p><ol><li>张学友：刘德华，我需要你参演我的演唱会，你能来吗？</li><li>刘德华：好的，我收到你的请求，我确认我可以来。</li><li>张学友：好的，我确认你来了，我们开始排练吧。</li></ol><p>四次挥手</p><ol><li>张学友：现在演唱会结束了，感谢你来参加我的演唱会，现在可以去忙你的事情了。</li><li>刘德华：好的，我收到你的请求，我确认我离开。</li><li>刘德华：我离开后，我需要你确认我离开。</li><li>张学友：好的，我确认你离开。</li></ol></div><h2 id="三、ssl-tls" tabindex="-1"><a class="header-anchor" href="#三、ssl-tls"><span>三、SSL/TLS</span></a></h2><p>SSL（Secure Sockets Layer）和TLS（Transport Layer Security）是用于加密网络通信的协议，它们可以保护数据在传输过程中的安全性和完整性。</p><p>SSL和TLS的主要功能包括：</p><ol><li><strong>加密数据</strong>：SSL和TLS使用加密算法对数据进行加密，确保数据在传输过程中的安全性。</li><li><strong>验证身份</strong>：SSL和TLS使用数字证书验证通信双方的身份，确保通信的双方是可信的。</li><li><strong>完整性保护</strong>：SSL和TLS使用哈希算法对数据进行完整性保护，确保数据在传输过程中没有被篡改。</li><li><strong>防止重放攻击</strong>：SSL和TLS使用时间戳和序列号防止重放攻击，确保数据不会被重复发送。</li></ol><p>SSL和TLS的主要区别在于版本和实现。SSL是最早的加密协议，而TLS是SSL的后续版本，提供了更强大的加密算法和更好的安全性。目前，TLS已经成为主流的加密协议，SSL已经被逐渐淘汰。</p><h3 id="_3-1-ssl-tls握手" tabindex="-1"><a class="header-anchor" href="#_3-1-ssl-tls握手"><span>3.1 SSL/TLS握手</span></a></h3><p>SSL/TLS握手是SSL/TLS协议建立安全连接的过程。</p><p>握手过程包括以下步骤：</p><ol><li><strong>客户端发送ClientHello消息</strong>：客户端向服务器发送ClientHello消息，包括客户端支持的SSL/TLS版本、加密算法、压缩方法等信息， 生成一个加密信息发送(Client random)。</li><li><strong>服务器发送ServerHello消息</strong>：服务器收到ClientHello消息后，选择一个双方都支持的SSL/TLS版本、加密算法、压缩方法等信息，并向客户端发送ServerHello消息，并且服务器向客户端发送自己的数字证书，证明服务器的身份，且生成一个加密信息发送(Server random)。</li><li><strong>客户端回应</strong>：客户端验证服务器的数字证书是否有效，如果证书无效，则握手失败，并且这里会生成一个加密信息(Premaster secret), 根据加密算法生成(Session Key), 并且回执给服务端。</li><li><strong>服务端回应</strong>：接收到客户端的(Premaster secret)， 根据加密算法生成和客户端一样的(Session Key)。</li></ol><p><img src="'+h+'" alt="SSL/TLS握手"></p><h2 id="结语" tabindex="-1"><a class="header-anchor" href="#结语"><span>结语</span></a></h2><p>以上就是关于网络协议这块在面试题中问的比较多的东西，如果需要获取更多知识，需要对这块进行深入学习，这里面涉及还是有蛮多东西的。一般这里的知识能应付大部分面试了。</p>',26);function v(k,C){const n=r("ExternalLinkIcon");return i(),a("div",null,[x,t("div",y,[T,t("p",null,[e("了解更多，请参考菜鸟网站 "),t("a",f,[e("Content-Type"),s(n)])])]),S,_,P,m,t("div",u,[L,t("p",null,[e("了解更多，请参考菜鸟网站 "),t("a",b,[e("MIME类型"),s(n)])])]),H])}const I=d(p,[["render",v],["__file","wangluoxieyi.html.vue"]]),M=JSON.parse('{"path":"/blogs/wangluoxieyi.html","title":"网络协议","lang":"en-US","frontmatter":{"title":"网络协议","categories":["HTTP","HTTPS"],"tags":["网络"],"date":"2024-08-03T00:00:00.000Z"},"headers":[{"level":2,"title":"前言","slug":"前言","link":"#前言","children":[]},{"level":2,"title":"一、HTTP","slug":"一、http","link":"#一、http","children":[{"level":3,"title":"1.1 基础知识","slug":"_1-1-基础知识","link":"#_1-1-基础知识","children":[]},{"level":3,"title":"1.2 http的状态码？","slug":"_1-2-http的状态码","link":"#_1-2-http的状态码","children":[]},{"level":3,"title":"1.3 请求方法","slug":"_1-3-请求方法","link":"#_1-3-请求方法","children":[]},{"level":3,"title":"1.4 https","slug":"_1-4-https","link":"#_1-4-https","children":[]},{"level":3,"title":"1.5 https与http的区别","slug":"_1-5-https与http的区别","link":"#_1-5-https与http的区别","children":[]},{"level":3,"title":"1.6 http2/3","slug":"_1-6-http2-3","link":"#_1-6-http2-3","children":[]},{"level":3,"title":"1.7 content-type","slug":"_1-7-content-type","link":"#_1-7-content-type","children":[]},{"level":3,"title":"1.8 MIME类型","slug":"_1-8-mime类型","link":"#_1-8-mime类型","children":[]}]},{"level":2,"title":"二、TCP/IP协议","slug":"二、tcp-ip协议","link":"#二、tcp-ip协议","children":[{"level":3,"title":"2.1 三次握手","slug":"_2-1-三次握手","link":"#_2-1-三次握手","children":[]},{"level":3,"title":"2.2 四次挥手","slug":"_2-2-四次挥手","link":"#_2-2-四次挥手","children":[]}]},{"level":2,"title":"三、SSL/TLS","slug":"三、ssl-tls","link":"#三、ssl-tls","children":[{"level":3,"title":"3.1 SSL/TLS握手","slug":"_3-1-ssl-tls握手","link":"#_3-1-ssl-tls握手","children":[]}]},{"level":2,"title":"结语","slug":"结语","link":"#结语","children":[]}],"git":{"createdTime":1724149584000,"updatedTime":1724149584000,"contributors":[{"name":"tiantao","email":"tiantao_yb@139.com","commits":1}]},"filePathRelative":"blogs/网络协议.md"}');export{I as comp,M as data};
